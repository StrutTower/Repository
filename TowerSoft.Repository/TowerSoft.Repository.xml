<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TowerSoft.Repository</name>
    </assembly>
    <members>
        <member name="T:TowerSoft.Repository.Attributes.AutonumberAttribute">
            <summary>
            Defines the properties as an autonumber map
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.Builders.PropertyMapBuilder.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:TowerSoft.Repository.Builders.PropertyMapBuilder.To(System.String)">
            <summary>
            Maps the property to a column name
            </summary>
            <param name="columnName">Column name in the database</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Builders.PropertyMapBuilder.ToSameName">
            <summary>
            Maps the property to a column with the same name
            </summary>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Builders.PropertyMapBuilder.NotMapped">
            <summary>
            Marks the property as not mapped. Use this to overide a map generated by the auto mapping option.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Builders.PropertyMapBuilder.AsAutonumber">
            <summary>
            Marks the map as an autonumber map. Use this for primary keys that auto increment
            </summary>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Builders.PropertyMapBuilder.AsID">
            <summary>
            Marls the map as an ID map. Use this for primary keys that do not auto increment
            </summary>
            <returns></returns>
        </member>
        <member name="T:TowerSoft.Repository.EntityMap`1">
            <summary>
            Extend this class to define the maps of a table.
            </summary>
            <typeparam name="TSource">Domain object type</typeparam>
        </member>
        <member name="M:TowerSoft.Repository.EntityMap`1.#ctor(System.String)">
            <summary>
            Initialize a new entity map
            </summary>
            <param name="tableName">Name of the database table</param>
        </member>
        <member name="M:TowerSoft.Repository.EntityMap`1.#ctor(System.String,TowerSoft.Repository.AutoMappingOption)">
            <summary>
            Initialize a new entity map
            </summary>
            <param name="tableName">Name of the table in the database</param>
            <param name="entityMapOption">Automapping option will enable automatically mapping properties to a column of the same name unless overidden.</param>
        </member>
        <member name="P:TowerSoft.Repository.EntityMap`1.TableName">
            <summary>
            The table name
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.EntityMap`1.EntityMapOption">
            <summary>
            If true, the mapper will assume that any public non-virtual properties with a 
            public getter and setter are the mapped to the same name as the property unless overriden in the entity map.
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.EntityMap`1.GetMaps">
            <summary>
            Get all maps defined by this entity map
            </summary>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.EntityMap`1.MapProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Begins building a map for a property
            </summary>
            <typeparam name="TProperty">Property of the entity to map</typeparam>
            <param name="expression">Expression for the property of the entity to map</param>
            <returns></returns>
        </member>
        <member name="F:TowerSoft.Repository.AutoMappingOption.None">
            <summary>
            Default option. No maps will automatically be generated.
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.AutoMappingOption.UseDefaultPropertyMaps">
            <summary>
            Automatically generates default mapping based on the names of all of the
            public properties with public getters and setters. These can be 
            overriden by the fluent maps.
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.AutoMappingOption.UseNonObjectPropertyMaps">
            <summary>
            Automatically generates default mapping based on the names of all of the
            public properties with public getters and setters except properties that 
            end with _Object or _Objects. These can be overriden by the fluent maps.
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.Comparison.Equals">
            <summary>
            Column is equal to the value
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.Comparison.NotEquals">
            <summary>
            Column is not equal to the value
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.Comparison.GreaterThan">
            <summary>
            Column is greater than the value
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.Comparison.GreaterThanOrEqual">
            <summary>
            Column is greater or equal to the value
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.Comparison.LessThan">
            <summary>
            Column is less than the value
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.Comparison.LessThanOrEqual">
            <summary>
            Column is less than or equal to the value
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.Comparison.LikeLeftSideWildcard">
            <summary>
            Column LIKE value with a wildcard added to the left side of the value
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.Comparison.LikeRightSideWildcard">
            <summary>
            Column LIKE value with a wildcard added to the right side of the value
            </summary>
        </member>
        <member name="F:TowerSoft.Repository.Comparison.LikeBothSidesWildcard">
            <summary>
            Column LIKE value with a wildcard added to both sides of the value
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.IDbAdapter.ConnectionString">
            <summary>
            Connection string used for the database connection
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.IDbAdapter.DbConnection">
            <summary>
            ADO.NET DbConnection for the current database
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.IDbAdapter.DbTransaction">
            <summary>
            ADO.NET DbTransaction for the current database
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.IDbAdapter.BeginTransaction">
            <summary>
            Begins a transaction
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.IDbAdapter.CommitTransaction">
            <summary>
            Commit the changes during the transaction to the database
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.IDbAdapter.RollbackTransaction">
            <summary>
            Rolls back the changes to the database that were made during the transaction
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.IDbAdapter.CreateNewDbConnection(System.String)">
            <summary>
            Returns the ADO.NET IDbCommand for this database.
            </summary>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.IDbAdapter.GetParameterPlaceholder(System.String)">
            <summary>
            Returns the parameter placeholder for the supplied column. This is used in the SQL query.
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.IDbAdapter.GetParameterName(System.String)">
            <summary>
            Returns the parameter name for the supplied column. This is used in the parameter dictionary.
            </summary>
            <param name="columnName">Name of the column</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.IDbAdapter.GetSelectColumnCast(System.Type,System.String,TowerSoft.Repository.IMap)">
            <summary>
            Gets the SELECT statement for this table and column.
            Typically this is just TableName.ColumnName but some databases require casting the column to s certain datatype
            </summary>
            <param name="type"></param>
            <param name="tableName"></param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.IDbAdapter.GetLastInsertIdStatement">
            <summary>
            SQL Statement to retrieve the last inserted ID for this database.
            </summary>
            <returns></returns>
        </member>
        <member name="P:TowerSoft.Repository.IDbAdapter.LastInsertIdInSeparateQuery">
            <summary>
            Specifies if the last insert ID query needs to be run separately from the insert statement.
            </summary>
        </member>
        <member name="T:TowerSoft.Repository.IMap">
            <summary>
            Database map used to map a column to a property
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.IMap.PropertyName">
            <summary>
            Name of the property on the object
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.IMap.ColumnName">
            <summary>
            Name of the column in the table
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.IMap.GetValue(System.Object)">
            <summary>
            Returns the value of the property for the supplied entity
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.IMap.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property on the supplied entity
            </summary>
            <param name="entity"></param>
            <param name="value"></param>
        </member>
        <member name="T:TowerSoft.Repository.Maps.AutonumberMap">
            <summary>
            Autonumber map used to map a property to a column that is set to autoincrement
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.Maps.AutonumberMap.#ctor(System.String)">
            <summary>
            Initialize a new autonumber map where the property name and column name are the same.
            </summary>
            <param name="propertyAndColumnName">Name of the property and column</param>
        </member>
        <member name="M:TowerSoft.Repository.Maps.AutonumberMap.#ctor(System.String,System.String)">
            <summary>
            Initialize a new autonumber map where the column and property names are different
            </summary>
            <param name="propertyName">Name of the property on the C# object</param>
            <param name="columnName">Name of the column in the database</param>
        </member>
        <member name="T:TowerSoft.Repository.Maps.IDMap">
            <summary>
            Primary key map used to map a property to a column that is a primary key but does not autoincrement
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.Maps.IDMap.#ctor(System.String)">
            <summary>
            Initialize a new IDMap where the property name and column name are the same.
            </summary>
            <param name="propertyAndColumnName">Name of the property and column</param>
        </member>
        <member name="M:TowerSoft.Repository.Maps.IDMap.#ctor(System.String,System.String)">
            <summary>
            Initialize a new IDMap where the column and property names are different
            </summary>
            <param name="propertyName">Name of the property on the C# object</param>
            <param name="columnName">Name of the column in the database</param>
        </member>
        <member name="T:TowerSoft.Repository.Maps.Map">
            <summary>
            Standard map used to map a property to a column
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.Maps.Map.PropertyName">
            <summary>
            Name of the property of the C# object
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.Maps.Map.ColumnName">
            <summary>
            Name of the column in the database
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.Maps.Map.#ctor(System.String)">
            <summary>
            Initialize a new Map where the property name and column name are the same.
            </summary>
            <param name="propertyAndColumnName">Name of the property and column</param>
        </member>
        <member name="M:TowerSoft.Repository.Maps.Map.#ctor(System.String,System.String)">
            <summary>
            Initialize a new Map where the column and property names are different
            </summary>
            <param name="propertyName">Name of the property on the C# object</param>
            <param name="columnName">Name of the column in the database</param>
        </member>
        <member name="M:TowerSoft.Repository.Maps.Map.GetValue(System.Object)">
            <summary>
            Get the value for this property from the supplied entity
            </summary>
            <param name="entity">Entity to retrieve the value from</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Maps.Map.SetValue(System.Object,System.Object)">
            <summary>
            Set the value of the property on the supplied entity
            </summary>
            <param name="entity">Entity to set the value on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="P:TowerSoft.Repository.Maps.MappingModel`1.AutonumberMap">
            <summary>
            Autonumber map, if there is one
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.Maps.MappingModel`1.AllMaps">
            <summary>
            All maps
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.Maps.MappingModel`1.StandardMaps">
            <summary>
            All non-primary key maps
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.Maps.MappingModel`1.PrimaryKeyMaps">
            <summary>
            All primary key maps. Includes autonumber maps
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.Maps.MappingModel`1.AllMapsDictionary">
            <summary>
            Property name / Column name dictionary of all maps
            </summary>
        </member>
        <member name="T:TowerSoft.Repository.QueryBuilder">
            <summary>
            Object to create complex SQL statements
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.QueryBuilder.TableName">
            <summary>
            Table name to query
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.QueryBuilder.SqlQuery">
            <summary>
            SQL statement
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.QueryBuilder.Parameters">
            <summary>
            List of parameters for thenSQL statement
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.QueryBuilder.AddParameter(System.String,System.Object)">
            <summary>
            Adds a new parameter
            </summary>
            <param name="parameterName">Name of the parameter as it appears in the SQL statement including the @ symbol for most databases.</param>
            <param name="value">Value of the parameter</param>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.#ctor(TowerSoft.Repository.IDbAdapter,System.Boolean,System.Boolean)">
            <summary>
            Creates a new Repository using attributes to define the database mapping.
            All non-virtual properties with public getters and setters will be mapped
            unless overridden with an attribute.
            </summary>
            <param name="dbAdapter">DbAdapter class for the database being used</param>
            <param name="useUnitOfWorkPattern">Sets if the unit of work pattern will be used. Default = true</param>
            <param name="ignoreObjectMaps">Sets if properties that end with _Object or _Objects will be ignored by the automatic mapping</param>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.#ctor(TowerSoft.Repository.IDbAdapter,TowerSoft.Repository.EntityMap{`0},System.Boolean)">
            <summary>
            Creates a new Repository using an EntityMap to define the database mapping.
            </summary>
            <param name="dbAdapter">DbAdapter class for the database being used</param>
            <param name="entityMap">Entity map class used to define the mapping for this repository</param>
            <param name="useUnitOfWorkPattern">Sets if the unit of work pattern will be used. Default = true</param>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.#ctor(TowerSoft.Repository.IDbAdapter,System.String,System.Collections.Generic.IEnumerable{TowerSoft.Repository.IMap},System.Boolean)">
            <summary>
            Creates a new Repository with the table name and maps passed directly into the contructor.
            </summary>
            <param name="dbAdapter">DbAdapter class for the database being used</param>
            <param name="tableName">Name of the table</param>
            <param name="maps">List of maps for this tabe</param>
            <param name="useUnitOfWorkPattern">Sets if the unit of work pattern will be used. Default = true</param>
        </member>
        <member name="P:TowerSoft.Repository.Repository`1.DbAdapter">
            <summary>
            DBAdapter used by this Repository
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.Repository`1.ConnectionString">
            <summary>
            Connection string being used by this Repository
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.Repository`1.TableName">
            <summary>
            Name of the database table
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.Repository`1.Mappings">
            <summary>
            Mapping model object. Stores all of the database maps
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.Repository`1.IsUnitOfWorkPattern">
            <summary>
            Stores if the Repository was created using the Unir of Work pattern
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetAll">
            <summary>
            Get all entities from the database table
            </summary>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetCount">
            <summary>
            Returns a total count of all rows in the table.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetCount(TowerSoft.Repository.WhereCondition)">
            <summary>
            Returns the number of rows that match the supplied WhereCondition
            </summary>
            <param name="whereCondition">WhereCondition to filter by</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetCount(System.Collections.Generic.IEnumerable{TowerSoft.Repository.WhereCondition})">
            <summary>
            Return the number of rows that match the supplied WhereConditions
            </summary>
            <param name="whereConditions">IEnumerable list of WhereCondtions to filter by</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.Add(`0)">
            <summary>
            Adds the supplied entity to the database
            </summary>
            <param name="entity">Entity to add to the database</param>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.Update(`0)">
            <summary>
            Updates the matching row in the database
            </summary>
            <param name="entity">Entity to update in the database</param>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.Remove(`0)">
            <summary>
            Removes the matching row from the database
            </summary>
            <param name="entity">Entity to remove from the database</param>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetSingleEntity(TowerSoft.Repository.WhereCondition)">
            <summary>
            Returns the first matching row from the database
            </summary>
            <param name="whereCondition">WhereCondition to filter by</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetSingleEntity(System.Collections.Generic.IEnumerable{TowerSoft.Repository.WhereCondition})">
            <summary>
            Returns the first matching row from the database
            </summary>
            <param name="whereConditions">IEnumerable list of WhereConditions to filter by</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetSingleEntity(TowerSoft.Repository.QueryBuilder)">
            <summary>
            Returns the first row from the database
            </summary>
            <param name="queryBuilder">QueryBuilder </param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetEntities(TowerSoft.Repository.WhereCondition)">
            <summary>
            Returns all matching rows from the database
            </summary>
            <param name="whereCondition">WhereCondition to filter by</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetEntities(System.Collections.Generic.IEnumerable{TowerSoft.Repository.WhereCondition})">
            <summary>
            Returns all matching rows from the database
            </summary>
            <param name="whereConditions">IEnumerable list of WhereConditions to filter by</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetEntities(TowerSoft.Repository.QueryBuilder)">
            <summary>
            Returns all rows returns from the SQL query
            </summary>
            <param name="queryBuilder">QueryBuilder</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetQueryBuilder">
            <summary>
            Returns a new instance of QueryBuilder for this repository
            </summary>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.WhereEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Object)">
            <summary>
            Creates a new WhereCondition using a strongly-typed property name
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression">Entity property</param>
            <param name="value">Value to compare to</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.Where``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},TowerSoft.Repository.Comparison,System.Object)">
            <summary>
            Creates a new WhereCondition usinf a strongly-typed property name
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression">Entity property</param>
            <param name="comparison">Comparision type</param>
            <param name="value">Value to compare to</param>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetDbConnection">
            <summary>
            Get the current DbConnection or creates a new one
            </summary>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.Repository`1.GetBasicSelectText">
            <summary>
            Returns the basic SELECT and FROM  parts of a SQL statement for the datebase table
            </summary>
            <returns></returns>
        </member>
        <member name="T:TowerSoft.Repository.WhereCondition">
            <summary>
            Object used to build simple SQL statments
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.WhereCondition.ColumnName">
            <summary>
            Column name
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.WhereCondition.Value">
            <summary>
            Value to compare to
            </summary>
        </member>
        <member name="P:TowerSoft.Repository.WhereCondition.Comparison">
            <summary>
            Comparison type
            </summary>
        </member>
        <member name="M:TowerSoft.Repository.WhereCondition.#ctor(System.String,System.Object,TowerSoft.Repository.Comparison)">
            <summary>
            Creates a new WhereCondition object that will be used to build a SQL statement
            </summary>
            <param name="columnName">Column name to compare to</param>
            <param name="value">Value to compare to</param>
            <param name="comparison">Comparision type. Default is Equals</param>
        </member>
        <member name="M:TowerSoft.Repository.WhereCondition.GetComparisonString">
            <summary>
            Returns the SQL where statement for this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.WhereCondition.GetParameterValue">
            <summary>
            Returns the parameter value
            </summary>
            <returns></returns>
        </member>
        <member name="M:TowerSoft.Repository.WhereCondition.IsNullEqualsOrNotEquals">
            <summary>
            Check if the SQL statment should be convert to a null where statement
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
